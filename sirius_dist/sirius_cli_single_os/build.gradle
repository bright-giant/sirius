dependencies {
    implementation project(':sirius_cli')
    implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: "$slf4j_version"
}

mainClassName = 'de.unijena.bioinf.ms.frontend.SiriusCLIApplication'
launch4j{
    mainClassName = project.mainClassName
    jar = getLibraryDir() + "\\" + getRootProject().getChildProjects().get('sirius_cli').tasks.getByName('jar').outputs.files.singleFile.getName()
}

distImage {
    dependsOn getParent().tasks.getByName('extractRuntimeImageHeadless')
    runtimeImageDirectory = getParent().tasks.getByName('extractRuntimeImageHeadless').outputs.files.singleFile
    imageName = 'sirius'
    mainClass = mainClassName
    mainJarName = getRootProject().getChildProjects().get('sirius_cli').tasks.getByName('jar').outputs.files.singleFile.getName()
    winConsole = true
    macPackageName = 'SIRIUS-headless'
}

distribution.dependsOn 'signDistImage'
distribution.dependsOn 'signDistInstaller'
if (project.OS.isMacOsX())
    distribution.dependsOn 'macNotarize'
distribution.dependsOn 'createChecksums'
distribution.dependsOn 'distImageZip'
if (!OS.isLinux())
    distribution.dependsOn 'distInstaller'


publishing {
    publications {
        siriusMS(org.gradle.api.publish.maven.MavenPublication) {
            artifactId = "$name"
            groupId = "$group"
            artifact source: "${distImage.getImageDir().absolutePath}.zip", classifier: "$osName-headless", extension: 'zip'
            if (!OS.isLinux())
                artifact source: "${OS.isMacOsX() ? distImage.getImageDir().absolutePath.replace('.app', installerAppendix) : distImage.getImageDir().absolutePath + installerAppendix}", classifier: "$osName-headless", extension: installerNameType
        }
        sirius(org.gradle.api.publish.maven.MavenPublication) {
            artifactId = "$name"
            groupId = "$group"
            artifact source: "${distImage.getImageDir().absolutePath}.zip", classifier: "$osName-headless", extension: 'zip'
            artifact source: "${distImage.getImageDir().absolutePath}.zip.sha256", classifier: "$osName-headless", extension: 'zip.sha256'
            if (!OS.isLinux()) {
                artifact source: "${OS.isMacOsX() ? distImage.getImageDir().absolutePath.replace('.app', installerAppendix) : distImage.getImageDir().absolutePath + installerAppendix}", classifier: "$osName-headless", extension: installerNameType
                artifact source: "${OS.isMacOsX() ? distImage.getImageDir().absolutePath.replace('.app', installerAppendix) : distImage.getImageDir().absolutePath + installerAppendix}.sha256", classifier: "$osName-headless", extension: "${installerNameType}.sha256"
            }
        }
    }
}
publishSiriusPublicationToMavenLocal.dependsOn 'distribution'
publishSiriusMSPublicationToMavenLocal.dependsOn 'distribution'

