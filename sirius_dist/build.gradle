import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

import java.nio.file.Files
import java.nio.file.Paths
import java.util.stream.Collectors

plugins {
    id 'edu.sc.seis.launch4j' version '2.4.6'
}


ext {
    // version for bundeled JRE
    jre_version = '15.0.4'
    zulu_jre_version = '15.34.17'
    jre_major = zulu_jre_version.split("[.]")[0]

    OS = DefaultNativePlatform.currentOperatingSystem

    if (OS.isLinux()) {
        nativeLibs = 'l64'
        osName = 'linux64'
        zosName = 'linux'
        installerNameType = 'deb'
        installerAppendix = "_${version}-1_amd64.$installerNameType"
    } else if (OS.isWindows()) {
        nativeLibs = 'w64'
        osName = 'win64'
        zosName = 'win'
        installerNameType = 'msi'
        installerAppendix = "-${version.replace('-SNAPSHOT', '')}.$installerNameType"
    } else if (OS.isMacOsX()) {
        nativeLibs = 'osx'
        osName = 'osx64'
        zosName = 'macosx'
        installerNameType = 'pkg'
        installerAppendix = "-${version.replace('-SNAPSHOT', '')}.$installerNameType"
    }
}


task downloadJDKFX(type: Download) {
    String fname = "zulu${zulu_jre_version}-ca-fx-jdk${jre_version}-${zosName}_x64"
    String ext = ".${OS.isWindows() ? 'zip' : 'tar.gz'}";
    project.ext.set("jdkfxPath", getBuildDir().toPath().resolve('tmp').resolve(fname).toFile())


    src "https://bio.informatik.uni-jena.de/repository/list/ext-release-local/zulu/jdk/${zulu_jre_version}/${fname + ext}"
    dest getBuildDir().toPath().resolve('tmp').resolve(fname + ext).toFile()
    onlyIfModified true
    overwrite false
}

task extractJDKFX(dependsOn: downloadJDKFX) {
    def s = downloadJDKFX.outputs.files.singleFile
    outputs.file(jdkfxPath)
    doLast {
        if (OS.isWindows()) {
            copy {
                from zipTree(s)
                into buildDir.toPath().resolve('tmp').toFile()
            }
        } else {
            exec { commandLine(['tar', 'zxf', s.absolutePath, '-C', buildDir.toPath().resolve('tmp').toString()]) }
        }
    }

}

task createRuntimeImgs(dependsOn: [extractJDKFX]) {
    String[] baseModules = ['java.sql', 'java.logging', 'jdk.jsobject', 'java.xml', 'jdk.xml.dom', 'java.datatransfer',
                            'java.naming', 'java.prefs', 'java.instrument', 'java.desktop']
    //todo can we get rid of beans to remove java.desktop
    String[] fxModules = baseModules +
            ['java.desktop', 'javafx.base', 'javafx.web', 'javafx.graphics', 'javafx.swing', 'javafx.controls']
    String[] bootModules = baseModules +
            ['java.management']

    File jlinkfx = jdkfxPath.toPath().resolve('bin').resolve(OS.isWindows() ? 'jlink.exe' : 'jlink').toFile()

    File outFX = buildDir.toPath().resolve('runtime').resolve("${jlinkfx.toPath().getParent().getParent().getFileName().toString().replace("jdk", "jre")}").toFile()
    File outheadl = Paths.get(outFX.absolutePath.replace('-fx-', '-')).toFile()
    File outboot = Paths.get(outFX.absolutePath.replace('-fx-', '-headless-boot-')).toFile()
    outputs.files(outFX, outheadl, outboot)

    String[] args = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    doLast {
        exec {
            String[] c = [jlinkfx.absolutePath, '--add-modules', "${baseModules.join(',')}", '--output', outheadl.absolutePath]
            commandLine(c + args)
        }
        exec {
            String[] c = [jlinkfx.absolutePath, '--add-modules', "${fxModules.join(',')}", '--output', outFX.absolutePath]
            commandLine(c + args)
        }
        exec {
            String[] c = [jlinkfx.absolutePath, '--add-modules', "${bootModules.join(',')}", '--output', outboot.absolutePath]
            commandLine(c + args)
        }
    }
}


task downloadGLPK(type: Download) {
    project.ext.set("glpkPath", getBuildDir().toPath().resolve('glpk').toFile())
    String fname = "glpk-${project.glpk_lib_version}.zip"

    src "https://bio.informatik.uni-jena.de/repository/list/dist-release-local/de/unijena/bioinf/glpk/$fname"
    dest getBuildDir().toPath().resolve('tmp').resolve(fname).toFile()
    onlyIfModified true
    overwrite false
    retries 2
    doLast {
        if (!state.getUpToDate()) {
            copy {
                getLogger().lifecycle("Unpacking GLPK...")
                from zipTree(outputs.files.singleFile)
                into buildDir
            }
        } else {
            getLogger().lifecycle("Unpacking GLPK SKIPPED")
        }
    }
}

task downloadCLP(type: Download) {
    project.ext.set("clpPath", getBuildDir().toPath().resolve('clp').toFile())
    String fname = "clp_cbc-${project.clp_lib_version}.zip"

    src "https://bio.informatik.uni-jena.de/repository/list/dist-release-local/de/unijena/bioinf/clp/$fname"
    dest getBuildDir().toPath().resolve('tmp').resolve(fname).toFile()
    onlyIfModified true
    overwrite false
    retries 2
    doLast {
        if (!state.getUpToDate()) {
            copy {
                getLogger().lifecycle("Unpacking CPL...")
                from zipTree(outputs.files.singleFile)
                into buildDir

            }
        } else {
            getLogger().lifecycle("Unpacking CPL SKIPPED")
        }
    }
}


task downloadRuntimeImageFX(type: Download) {
    String fname = "zulu${zulu_jre_version}-ca-fx-jre${jre_version}-${zosName}_x64${project.OS.isWindows() ? ".zip" : ".tar.gz"}"

    src "https://cdn.azul.com/zulu/bin/${fname}"
    dest getBuildDir().toPath().resolve('runtime').resolve(fname).toFile()
    onlyIfModified true
    overwrite false
}

task extractRuntimeImageFX(type: ExtractRuntime, dependsOn: downloadRuntimeImageFX) {
    inputArchive = downloadRuntimeImageFX.dest
}

task downloadRuntimeImageHeadless(type: Download) {
    String fname = "zulu${zulu_jre_version}-ca-jre${jre_version}-${zosName}_x64${project.OS.isWindows() ? ".zip" : ".tar.gz"}"

    src "https://cdn.azul.com/zulu/bin/${fname}"
    dest getBuildDir().toPath().resolve('runtime').resolve(fname).toFile()
    onlyIfModified true
    overwrite false
}

task extractRuntimeImageHeadless(type: ExtractRuntime, dependsOn: downloadRuntimeImageHeadless) {
    inputArchive = downloadRuntimeImageHeadless.dest
}

task downloadManual(type: Download, group: 'documentation') {
    String manualName = "manual-$version-manual.pdf"
    src "https://bio.informatik.uni-jena.de/repository/${version.toString().endsWith('-SNAPSHOT') ? 'dist-snapshot-local' : 'dist-release-local'}/de/unijena/bioinf/ms/manual/$version/$manualName"
    dest buildDir.toPath().resolve("manual/$manualName").toFile()
    onlyIfModified true
    overwrite false
}


subprojects {
    apply plugin: 'edu.sc.seis.launch4j'

    jar {
        enabled = false
    }

    //###################################### Start Default values ##########################################

    //collect auto generated profiles and check them for null values
    task collectProfiles() {
        group = 'properties'
        outputs.dir("$buildDir/tmp/profiles/de.unijena.bioinf.ms.defaults")
        doLast {
            outputs.files.singleFile.deleteDir()
            copy {
                from configurations.runtime.resolve().stream().map { f ->
                    zipTree(f).matching {
                        include 'de.unijena.bioinf.ms.defaults/*.auto.config'
                    }
                }.collect(Collectors.toList())

                into "$buildDir/tmp/profiles"
            }
        }


    }
    collectProfiles.dependsOn('compileJava')

    task makeProfileTemplate() {
        group = 'properties'
        outputs.file("$buildDir/tmp/profiles_concat/concat.profile")
        doLast {
            outputs.files.singleFile.deleteDir()
            outputs.files.singleFile.withWriter { w ->
                // For each input file path
                tasks.collectProfiles.outputs.files.singleFile.listFiles().each { f ->
                    // Get a reader for the input file
                    f.withReader { r ->
                        // And write data from the input into the output
                        w << r << '\n'
                    }
                }
            }
        }
    }
    makeProfileTemplate.dependsOn('collectProfiles')

    task checkDefaultProfile() {
        group = 'properties'
        doLast {
            Properties defaultProfile = new Properties()
            tasks.makeProfileTemplate.outputs.files.singleFile
                    .withReader("UTF8", {
                        defaultProfile.load(it)
                    })

            def errorCount = 0
            logger.lifecycle(System.lineSeparator() + "Checking for NULL values in Profile...")
            defaultProfile.keys().each { e ->
                def v = defaultProfile.getProperty(e);
                if (v == null || ((String) v).isEmpty()) {
                    logger.warn("${e} is NULL!")
                    errorCount++
                }
            }
            if (errorCount > 0) {
                logger.error("FAILED: $errorCount NULL values found!" + System.lineSeparator())
                throw new GradleException("Error: There are NULL values in at least one auto.config files. See Warnings for more detailed information")
            }
            logger.lifecycle("DONE: No NULL values found!" + System.lineSeparator())
        }
    }
    checkDefaultProfile.dependsOn('makeProfileTemplate')

    //###################################### END Default values ##########################################
    launch4j {
        copyright = "Chair of Bioinformatics, Friedrich-Schiller-University Jena."
        companyName = "Friedrich-Schiller-University Jena"

        version = project.version.toString().replace("-SNAPSHOT", "")
        textVersion = project.version
        supportUrl = "https://bio.informatik.uni-jena.de/software/sirius/"
        fileDescription = "SIRIUS command-line interface"

        icon = "${rootProject.projectDir}/icons/sirius-icon.ico"
        headerType = "console"
        outfile = "sirius.exe"

        jvmOptions = [
                '-Xms1G',
//                '-Xmx4G',
                '-XX:MaxRAMPercentage=85',
                '-XX:+UseG1GC',
                '-XX:+UseStringDeduplication'
        ]

        dontWrapJar = true
        bundledJrePath = "./runtime"
        classpath = ["app\\*", "%GUROBI_HOME%\\lib\\gurobi.jar", "%CPLEX_HOME%\\lib\\cplex.jar"]
        libraryDir = "app"

        jdkPreference = "preferJre"
        jreMinVersion = "11"
        bundledJre64Bit = true
        jreRuntimeBits = "64"
        messagesBundledJreError = "Could not Load bundled JRE."
    }


    task distImage(type: AppImage, group: 'distribution') {
        dependsOn installDist, downloadCLP/*,downloadManual, downloadGLPK*/
        if (OS.isWindows())
            dependsOn createAllExecutables

        jpackagerBin = Paths.get(System.getProperty("java.home")).resolve('bin').resolve(OS.isWindows() ? 'jpackage.exe' : 'jpackage').toFile()
        mainClass = mainClassName
        outputDir = buildDir.toPath().resolve('distributions').toFile()
        winConsole = true

        String[] jArgs = [
                '-Xms1G',
//                '-Xmx4G',
                '-XX:MaxRAMPercentage=85',
                '-XX:+UseG1GC',
                '-XX:+UseStringDeduplication'
        ]

        doLast {
            File nativeLibsTarget
            File appRootTarget
            File launcherTarget
            File libTarget
            if (OS.isLinux()) {
                appRootTarget = outputDir.toPath().resolve(imageName).toFile()
                nativeLibsTarget = appRootTarget.toPath().resolve("lib/native").toFile()
                launcherTarget = appRootTarget.toPath().resolve("bin").toFile()
                libTarget = appRootTarget.toPath().resolve("lib/app").toFile()
            } else if (OS.isWindows()) {
                appRootTarget = outputDir.toPath().resolve(imageName).toFile()
                nativeLibsTarget = appRootTarget
                launcherTarget = appRootTarget
                libTarget = appRootTarget.toPath().resolve("app").toFile()
            } else if (OS.isMacOsX()) {
                appRootTarget = outputDir.toPath().resolve("${imageName}.app/Contents").toFile()
                nativeLibsTarget = appRootTarget.toPath().resolve("native").toFile()
                launcherTarget = appRootTarget.toPath().resolve("MacOS").toFile()
                libTarget = appRootTarget.toPath().resolve("app").toFile()
            } else {
                throw new RuntimeException("Could not detect OS for packaging!")
            }

            project.delete {
                delete fileTree(dir: libTarget, includes: libExclude)
            }

            copy {
                from("${glpkPath}/$nativeLibs/") {
                    include('libglpk.so.40')
                    include('libglpk_java.so')
                }
                from("${clpPath}/$nativeLibs/")
                into(nativeLibsTarget)
            }
            copy {
                from("${rootDir}") {
                    include('COPYING.txt')
                    include('LICENSE.txt')
                }
                from(downloadManual.outputs.files.singleFile)
                into(appRootTarget)
            }


            if (OS.isWindows()) {
                //delete exes because they are write protected
                project.delete {
                    delete fileTree(dir: appRootTarget, includes: ["*.exe"])
                }

                copy {
                    from("${buildDir}/launch4j") {
                        include("*.exe")
                    }
                    into(appRootTarget)
                }
            }


            if (launchers != null) {
                launchers.forEach({ k, v ->
                    copy {
                        from(v)
                        into(launcherTarget)
                        rename(v.getName(), k)
                    }
                })
            }


            def templateBinding = [
                    toolName : "SIRIUS",
                    mainClass: mainClassName
            ]

            def f
            def sf
            if (OS.isLinux()) {
                f = file("$appRootTarget/bin/sirius")
                sf = file("${rootDir}/scripts/sirius.sh.templ")
                templateBinding.shell = "sh"
                templateBinding.classPath = "\\\"\$JAR_HOME/*\\\":\\\"\$GUROBI_HOME/lib/gurobi.jar\\\":\\\"\$CPLEX_HOME/lib/cplex.jar\\\""
                templateBinding.jvmOpts = "${Arrays.stream(jArgs).collect(Collectors.joining(' '))} -Djava.library.path=\\\"\$GUROBI_HOME/lib\\\":\\\"\$CPLEX_HOME/bin/x86-64_linux\\\":\\\"\$APP_HOME/lib/native\\\":\\\"\$APP_HOME/lib/runtime/lib\\\""
                templateBinding.javaCommand = "\$APP_HOME/lib/runtime/bin/java"
                templateBinding.libraryPathKey = "LD_LIBRARY_PATH"
                templateBinding.libraryPathVal = "\$GUROBI_HOME/lib:\$CPLEX_HOME/bin/x86-64_linux:\$APP_HOME/lib/native:\$APP_HOME/lib/runtime/lib:\$LD_LIBRARY_PATH"
                templateBinding.jarHome = "\$APP_HOME/lib/app"
            } else if (OS.isMacOsX()) {
                f = file("$appRootTarget/MacOS/sirius")
                sf = file("${rootDir}/scripts/sirius.sh.templ")
                templateBinding.shell = "zsh"
                templateBinding.classPath = "\\\"\$JAR_HOME/*\\\":\\\"\$GUROBI_HOME/lib/gurobi.jar\\\":\\\"\$CPLEX_HOME/lib/cplex.jar\\\""
                templateBinding.jvmOpts = "${Arrays.stream(jArgs).collect(Collectors.joining(' '))} -Djava.library.path=\\\"\$GUROBI_HOME/lib\\\":\\\"\$CPLEX_HOME/bin/x86-64_linux\\\":\\\"\$APP_HOME/native\\\":\\\"\$APP_HOME/runtime/Contents/Home/lib\\\""
                templateBinding.javaCommand = "\$APP_HOME/runtime/Contents/Home/bin/java"
                templateBinding.libraryPathKey = "DYLD_LIBRARY_PATH"
                templateBinding.libraryPathVal = "\$GUROBI_HOME/lib:\$CPLEX_HOME/bin/x86-64_osx:\$APP_HOME/native:\$APP_HOME/runtime/Contents/Home/lib:\$DYLD_LIBRARY_PATH"
                templateBinding.jarHome = "\$APP_HOME/app"
            } else if (OS.isWindows()) {
                f = file("$appRootTarget/sirius.bat")
                sf = file("${rootDir}/scripts/sirius.bat.templ")
                templateBinding.classPath = "%JAR_HOME%\\*"
                templateBinding.jvmOpts = "${Arrays.stream(jArgs).map({ s -> '"' + s + '"' }).collect(Collectors.joining(" "))}"
                templateBinding.jarHome = "%APP_HOME%\\app"
                templateBinding.gurobiJar = "%GUROBI_HOME%\\lib\\gurobi.jar"
                templateBinding.cplexJar = "%CPLEX_HOME%\\lib\\cplex.jar"
            } else {
                throw new IllegalArgumentException("Cannot determine operating system for build")
            }

            String script = sf.text
            templateBinding.forEach({ k, v -> script = script.replace("#$k#", v) })
            f.withWriter { it.write(script) }
            f.setExecutable(true, false)
        }
    }
    distImage.shouldRunAfter downloadManual

    task distImageZip(dependsOn: distImage, group: 'distribution') {
        doFirst {
            def imageDir = distImage.getImageDir()
            def parentPath = imageDir.parentFile.toPath()
            def zipFile = parentPath.resolve("${imageDir.getName()}.zip")
            project.ant.zip(destfile: zipFile, duplicate: 'fail') {
                imageDir.eachFileRecurse { f ->
                    int mode = f.canExecute() ? 755 : 644
                    def relPath = parentPath.relativize(f.toPath()).toString()
                    zipfileset(dir: parentPath, includes: relPath, filemode: mode)
                }
            }
        }
    }

    task distInstaller(type: AppInstaller, dependsOn: distImage, group: 'distribution') {
        distImg = distImage
        types = [installerNameType]
        licenseFile = getRootProject().rootDir.toPath().resolve('jpackage').resolve('LICENSE-Full.txt').toFile()

        //linux
        linuxMenuGroup = ['Applications', 'Science']
        debPackageMaintaner = 'sirius@uni-jena.de'
    }

    task distribution { group = 'distribution' }
    artifactoryPublish.dependsOn 'distribution'
}


//////////////////////////////////////////////////////////////////////////////////
abstract class ExtractRuntime extends DefaultTask {
    @InputFile
    File inputArchive

    @OutputDirectory
    def getOutputDir() {
        return new File(inputArchive.absolutePath.replace((project.OS.isWindows() ? '.zip' : '.tar.gz'), ''))
    }

    @TaskAction
    def execute() {
        //stupid hack to delete write protected files on nix
        getLogger().lifecycle("Unpacking runtime image $inputArchive...")
        if (project.OS.isWindows()) {
            getOutputDir().deleteDir()
            project.copy {
                from project.zipTree(inputArchive)
                into getOutputDir().getParentFile()
            }
        } else if (project.OS.isLinux()) {
            project.exec { commandLine(['rm', '-rf', getOutputDir().absolutePath]) }
            project.exec { commandLine(['tar', 'zxf', inputArchive.absolutePath, '-C', getOutputDir().getParentFile().absolutePath]) }
//            project.exec { commandLine(['unzip', '-q', inputArchive.absolutePath, '-d', getOutputDir().getParentFile().absolutePath]) }
        }else {
            def tmpPath= getOutputDir().getParentFile().absolutePath + "/mac"
            Files.createDirectories(Paths.get(tmpPath))
            project.exec { commandLine(['rm', '-rf', tmpPath]) }
            Files.createDirectories(Paths.get(tmpPath))
            project.exec { commandLine(['tar', 'zxf', inputArchive.absolutePath, '-C', tmpPath]) }
            project.copy {
                from "${tmpPath}/${getOutputDir().getName()}/zulu-${project.jre_major}.jre/Contents/Home"
                into getOutputDir()
            }
        }
    }
}

abstract class AppImage extends DefaultTask {

    File inputDir
    File jpackagerBin
    File outputDir
    String imageName
    String[] jvmArgs
    String[] args
    String version
    String mainClass
    String mainJarName
    File runtimeImageDirectory
    boolean winConsole
    Map<String, File> launchers = [:]

    /*--mac-package-name name string
    Name of the application as it appears in the Menu Bar.
    This can be different from the application name.
    This name must be less than 16 characters long and be suitable for displaying in the menu bar and the application Info window. Defaults to the application name.*/
    String macPackageName = null

    AppImage() {
        imageName = project.name
        jvmArgs = []
        version = project.OS.isLinux() ? project.version : project.version.replace('-SNAPSHOT', '')
        winConsole = false
        inputDir = project.tasks.getByName('installDist').outputs.files.singleFile.toPath().resolve('lib').toFile()
    }

    File getImageDir() {
        return outputDir.toPath().resolve(project.OS.isMacOsX() ? "${imageName}.app" : imageName).toFile()
    }

    @TaskAction
    def execute() {
        getImageDir().deleteDir()
        String[] p = ['--type', 'app-image']
        p += createParameters()
        project.exec {
            def c = buildCommand(p)
            println c
            commandLine(c)
        }
    }

    def buildCommand(String[] parameters) {
        if (project.OS.isWindows()) {
            //because windows command line sucks!
            List<String> c = parameters as List
            c.add(0, "\"${jpackagerBin.absolutePath}\"")
            return c.toArray()
        } else {
            getLogger().lifecycle("${jpackagerBin.absolutePath} ${parameters.join(' ')}")
            return ['bash', '-e', '-c', """
                ${jpackagerBin.absolutePath} ${parameters.join(' ')}
                """]
        }
    }

    String[] createParameters() {
        def paras = [
                '--runtime-image', runtimeImageDirectory.absolutePath,
                '-i', inputDir.absolutePath,
                '--dest', outputDir.toString(),
                '--name', imageName,
                '--app-version', version,
                '--main-class', mainClass,
                '--main-jar', mainJarName
        ]

        if (jvmArgs != null)
            for (String arg : jvmArgs)
                paras += ['--java-options', "\"$arg\"",]

        if (args != null)
            for (String arg : args)
                paras += ['--arguments', "\"$arg\""]

        /*if (launchers != null)
            for (String name : launchers.keySet())
                paras += ["--add-launcher", "\"$name=${launchers.get(name)}\""]*/


        def iconDir = project.getRootProject().rootDir.toPath().resolve('icons')
        if (project.OS.isWindows()) {
            paras += ["--icon", "${iconDir.resolve('sirius-icon.ico').toString()}"]
            if (winConsole)
                paras += ['--win-console']
        } else if (project.OS.isMacOsX()) {
            paras += ["--icon", "${iconDir.resolve('sirius-icon.icns').toString()}"]
            if (macPackageName != null && !macPackageName.isBlank())
                paras += ['--mac-package-name', "\"$macPackageName\""]
        } else if (project.OS.isLinux()) {
            paras += ["--icon", "${iconDir.resolve('sirius-icon.png').toString()}"]
        } else {
            throw new IllegalArgumentException("Could not determine the OS to build on")
        }
        return paras
    }
}

abstract class AppInstaller extends DefaultTask {
    AppImage distImg
    String[] types
    File licenseFile


    boolean winDirChooser = true
    boolean winMenu = true
    String winMenuGroup = null
    boolean winShortcut
    boolean winPerUserInstall = false


    /*--linux-menu-group <menu-group-name>
          Menu group this application is placed in*/
    String[] linuxMenuGroup = null
    /* --linux-package-deps
          Required packages or capabilities for the application*/
    String[] packageDeps = null
    /*--linux-shortcut
          Creates a shortcut for the application*/
    boolean linuxShortcut = false
    /*--linux-deb-maintainer <email address>
          Maintainer for .deb package*/
    String debPackageMaintaner = null

    @TaskAction
    def execute() {
        String[] p = ['--type', types.join(',')]
        p += createParameters()
        project.exec {
            def c = distImg.buildCommand(p)
            println c
            commandLine(c)
        }
    }

    String getAppName() {
        return (appName != null && !appName.isBlank()) ? appName : distImg.imageName
    }

    String[] createParameters() {
        String[] paras = []//distImg.createParameters()

        paras += [
                '--name', distImg.imageName,
                '--app-image', distImg.getImageDir().absolutePath,
                '--license-file', licenseFile.absolutePath,
                '--dest', distImg.outputDir.absolutePath,
                '--app-version', distImg.version,
//                "--icon", "${project.getRootProject().rootDir.toPath().resolve('icons').resolve('sirius-icon.png').toString()}"
//                '--install-dirr'
        ]


        if (project.OS.isWindows()) {
            if (winDirChooser)
                paras += ['--win-dir-chooser'/*, winDirChooser ? '1' : '0'*/]
            if (winMenu)
                paras += ['--win-menu'/*, winMenu ? '1' : '0'*/]
            if (winMenuGroup != null && !winMenuGroup.isBlank())
                paras += ['--win-menu-group', "\"$winMenuGroup\""]
            if (winShortcut)
                paras += ['--win-shortcut']
            if (winPerUserInstall)
                paras += ['--win-per-user-install']
        } else if (project.OS.isMacOsX()) {

        } else if (project.OS.isLinux()) {
            if (linuxShortcut)
                paras += ['--linux-shortcut']
            if (debPackageMaintaner != null && !debPackageMaintaner.isBlank())
                paras += ['--linux-deb-maintainer', "\"$debPackageMaintaner\""]
            if (linuxMenuGroup != null && linuxMenuGroup.length > 0)
                paras += ['--linux-menu-group', "\"${linuxMenuGroup.join(';')}\""]
            if (packageDeps != null && packageDeps.length > 0)
                paras += ['--linux-deb-maintainer', "\"${packageDeps.join(',')}\""]
        } else {
            throw new IllegalArgumentException("Could not determine the OS to build on")
        }
        return paras
    }
}
