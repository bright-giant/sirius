import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
//        classpath 'edu.sc.seis.gradle:launch4j:2.4.9'
        classpath 'commons-configuration:commons-configuration:1.10'
        classpath 'com.github.viswaramamoorthy:gradle-util-plugins:0.1.0-RELEASE'
        classpath 'org.yaml:snakeyaml:1.29'
    }
}

plugins {
    id "com.jfrog.artifactory" version "4.25.1"
    id "de.undercouch.download" version "4.1.1"
}

//Global Properties
ext {
    //version for external libraries
    slf4j_version = '1.7.36'
    jjobs_version = '0.9.27'
    json_version = '1.0' //todo move to gson
    json_impl_version = "1.0.4" //todo move to gson

    cdk_version = "2.3"

    picocli_version = '4.6.3'//'3.9.5'

    glpk_lib_version = '4.60'
    clp_lib_version = '2.10'

    //locations of runtime libraries
    //jre path relative tu app home
    jre_path = 'zulu'
    lib_path = 'lib'
    native_path = 'native'

    libExclude = ['gurobi-jar-*.jar', 'cplex-*.jar']


    jetbrains_version = "22.0.0"

    // mainly for IDE execution, ilp libs are not shipped with distributions anyways
    cplex_version = '12.7.1'
//    cplex_version = '20.1.0'
    gurobi_version = '9.1.1'

    logger.lifecycle('reading gradle properties file...')
    File propertiesFile = Paths.get(System.properties['user.home'], 'gradle.properties').toFile()
    if (propertiesFile.exists()) {
        getLogger().lifecycle("Loading properties from ${propertiesFile.absolutePath}")
        Properties props = new Properties()

        propertiesFile.withReader("UTF8", {
            props.load(it)
        })
        System.properties.putAll(props)
    }else {
        getLogger().lifecycle("No properties file found at '${propertiesFile.absolutePath}'. Some tasks might not work without this information.")
    }

    logger.lifecycle('reading build properties file...')
    props = new Properties()
    File propertiesFileIn = new File("${projectDir}/sirius_cli/src/main/resources/sirius_frontend.build.properties")
    propertiesFileIn.withReader("UTF8", {
        props.load(it)
    })
    System.properties.putAll(props)

    // edit all these versions in sirius_cli/src/main/resources/....build.properties
    appName = System.properties.getProperty('de.unijena.bioinf.utils.errorReport.softwareName').toLowerCase()
//    buildNumber = System.properties.getProperty('de.unijena.bioinf.sirius.build')
//    println(buildNumber)
    siriusFrontendVersion = System.properties.getProperty('de.unijena.bioinf.siriusFrontend.version')
    siriusVersion = System.properties.getProperty('de.unijena.bioinf.sirius.version')
    fingeridVersion = System.properties.getProperty('de.unijena.bioinf.fingerid.version')
    mztabm_version = System.properties.getProperty('de.unijena.bioinf.mztabm.version')
}


/*################### DISTRIBUTION STUFF ################### */
project.ext.set("linSuffix", "linux")
project.ext.set("winSuffix", "win")
project.ext.set("macSuffix", "osx")
project.ext.set("arch", ['64', '32'])
project.ext.set("distPath", file('dist').absolutePath)


allprojects {
    apply plugin: "com.jfrog.artifactory"
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'


    sourceCompatibility = 13
    targetCompatibility = 15

    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"
    javadoc.options.encoding = 'UTF-8'


    version = "$siriusFrontendVersion"
    group = 'de.unijena.bioinf.ms'

    repositories {
        mavenLocal()
        mavenCentral()
        maven {//public libs only so anybody can build the frontend without login
            url "https://bio.informatik.uni-jena.de/repository/libs-oss"
            metadataSources {
                mavenPom()
                artifact()
            }
        }
        maven {
            url "https://www.ebi.ac.uk/Tools/maven/repos/content/groups/ebi-repo/"
        }
        maven {
            url "https://www.xypron.de/repository" //glpk repo
        }

        maven {
            url "https://repo1.maven.org/maven2/" //glazed lists
        }
        /*maven {
            url "https://www.ebi.ac.uk/intact/maven/nexus/content/repositories/ebi-repo/" //cpdetector no gpl
            metadataSources { artifact() }
        }*/

    }

    dependencies {

        annotationProcessor "de.unijena.bioinf.ms:processor:$siriusVersion"
        implementation 'net.sf.trove4j:core:3.1.0'

        implementation "org.jetbrains:annotations:$jetbrains_version"

        implementation "org.slf4j:log4j-over-slf4j:$slf4j_version"
        implementation "org.slf4j:jcl-over-slf4j:$slf4j_version"
        implementation "org.slf4j:slf4j-api:$slf4j_version"

        testImplementation group: 'junit', name: 'junit', version: '4.12'

        // intellij seems to ignore other scopes than compile so we need to have this here and remove it before distribution
//        implemetation "com.gurobi:gurobi-jar:9.1.1"
//        implemetation "cplex:cplex:12.7.1"
    }

    //there are some outdated incompatible trove dependencies in some libs.
    // this is to exclude them and enforce the one we need.
    configurations.all {
        //replaced by log4j-over-slf4j
        it.exclude group: "log4j", module: "log4j"
        //replaced by jcl-over-slf4j
        it.exclude group: "commons-logging", module: "commons-logging"
        it.exclude module: 'trove4j'
    }

    configurations {
        compileClasspath {
            resolutionStrategy.force 'net.sf.trove4j:core:3.1.0'
        }
    }
}


subprojects {
    apply plugin: 'application'


    task listDependecies {
        group = 'reporting'
        doLast {
            project.configurations.implementation.resolvedConfiguration.resolvedArtifacts.stream().map({ i -> i.getModuleVersion()..toString() })
                    .sorted().forEach({ i -> println(i) })
        }
    }
}


task sourceJar(type: Jar) {
    group = 'build'
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    group = 'documentation'
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

def javaProjects() {
    subprojects.findAll { new File(it.projectDir, 'src').directory }
}

allprojects {
    configure(javaProjects()) {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    if (version.toString().endsWith('-SNAPSHOT'))
                        setArtifacts([jar, sourceJar])
                    else
                        setArtifacts([jar, sourceJar, javadocJar])
                }
            }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from project.components.java
                //adding submodules to pom
                pom.withXml {
                    if (!project.subprojects.isEmpty()) {
                        def modlules = asNode().appendNode('modules', '')
                        project.subprojects.each {
                            new Node(modlules, 'module', it.name)
                        }
                    }
                }
                setArtifacts([])
            }
        }
    }
}

task refreshDownloadLinks {
    File webPath =  getBuildDir().toPath().resolve('tmp/webSite/').toFile()
    group = 'publishing'
    File outfile = new File(webPath,"sirius-download.md")
    outputs.file(outfile)

    doLast {
        webPath.mkdirs()
        def repoKey = "${project.version.toString().endsWith('-SNAPSHOT') ? 'dist-snapshot-local' : 'dist-release-local'}"

        List<String> lines = [
                "### SIRIUS+CSI:FingerID GUI and CLI - Version $version (${new Date().format('yyyy-MM-dd')})",
                "##### These versions include the Java Runtime Environment, so there is no need to install Java separately! Just download, install/unpack and execute.",
                "- for Windows (64bit): [msi](https://github.com/boecker-lab/sirius/releases/download/v$version/sirius-$version-win64.msi) / " +
                        "[zip](https://github.com/boecker-lab/sirius/releases/download/v$version/sirius-$version-win64.zip)",
                "- for Linux (64bit): [zip](https://github.com/boecker-lab/sirius/releases/download/v$version/sirius-$version-linux64.zip)",
                "- for Mac (64bit): [pkg](https://github.com/boecker-lab/sirius/releases/download/v$version/sirius-$version-osx64.pkg) / " +
                        "[zip](https://github.com/boecker-lab/sirius/releases/download/v$version/sirius-$version-osx64.zip)",
                "",
                "### SIRIUS+CSI:FingerID Command-Line Interface only - Version $version (${new Date().format('yyyy-MM-dd')})",
                "##### These versions include the Java Runtime Environment, so there is no need to install Java separately! Just download, install/unpack and execute.",
                "- for Windows (64bit): [msi](https://github.com/boecker-lab/sirius/releases/download/v$version/sirius-$version-win64-headless.msi) / " +
                        "[zip](https://github.com/boecker-lab/sirius/releases/download/v$version/sirius-$version-win64-headless.zip)",
                "- for Linux (64bit): [zip](https://github.com/boecker-lab/sirius/releases/download/v$version/sirius-$version-linux64-headless.zip)",
                "- for Mac (64bit): [pkg](https://github.com/boecker-lab/sirius/releases/download/v$version/sirius-$version-osx64-headless.pkg) / " +
                        "[zip](https://github.com/boecker-lab/sirius/releases/download/v$version/sirius-$version-osx64-headless.zip)",
                ""
        ] as List

        Files.deleteIfExists(outfile.toPath())
        Files.write(outfile.toPath(), lines, StandardOpenOption.CREATE)
    }
}

task refreshTrainingLinks {
    File webPath =  getBuildDir().toPath().resolve('tmp/webSite/').toFile()
    group = 'publishing'
    File outfile = new File(webPath,"sirius-training.md")
    outputs.file(outfile)

    doLast {
        webPath.mkdirs()
        List<String> lines = [
                "- https://www.csi-fingerid.uni-jena.de/v$fingeridVersion/api/fingerid/trainingstructures?predictor=1 (training structures for positive ion mode)",
                "- https://www.csi-fingerid.uni-jena.de/v$fingeridVersion/api/fingerid/trainingstructures?predictor=2 (training structures for negative ion mode)"
        ] as List

        Files.deleteIfExists(outfile.toPath())
        Files.write(outfile.toPath(), lines, StandardOpenOption.CREATE)
    }
}

task refreshReadMe {
    inputs.files(refreshDownloadLinks.outputs.files.singleFile, refreshTrainingLinks.outputs.files.singleFile)
    outputs.file("${getRootDir()}/README.md")
    group = 'publishing'

    doFirst {
        File dld = inputs.files.getAt(0)
        File clg = inputs.files.getAt(1)
        File out = outputs.files.singleFile

        List<String> links = Files.readAllLines(dld.toPath())
        List<String> training = Files.readAllLines(clg.toPath())


        Map<String, String> keywords = ['<!--begin download-->': '<!--end download-->', '<!--begin training-->': '<!--end training-->']
        Map<String, List<String>> replacements = ['<!--begin download-->': links, '<!--begin training-->': training]

        List<String> lines = Files.readAllLines(out.toPath())
        List<String> nuLines = new LinkedList<>()
        String keyword = null
        String keywordEnd = null

        lines.each { String line ->
            if (line.startsWith("[![Generic badge](https://img.shields.io/badge/Version-")){
                nuLines.add("[![Generic badge](https://img.shields.io/badge/Version-${project.version.replace("-","--")}-informational.svg)](https://shields.io/)")
            }else if (keyword == null) {
                keywordEnd = keywords.get(line)
                nuLines.add(line)
                if (keywordEnd != null) {
                    keyword = line
                    def r = replacements.get(keyword)

                    nuLines.add('')
                    nuLines.addAll(r)
                }
            } else if (line.equals(keywordEnd)) {
                nuLines.add('')
                nuLines.add(line)
                keyword = null
                keywordEnd = null
            }
        }


        Files.deleteIfExists(out.toPath())
        Files.write(out.toPath(), nuLines, StandardOpenOption.CREATE)
    }
}
refreshReadMe.dependsOn refreshTrainingLinks
refreshReadMe.dependsOn refreshDownloadLinks
// publication artifactory
artifactory {
    contextUrl = 'https://bio.informatik.uni-jena.de/repository/'
    publish {
        repository {
            repoKey = "${project.version.toString().endsWith('-SNAPSHOT') ? 'dist-snapshot-local' : 'dist-release-local'}"
            username = System.getenv("ARTIFACTORY_USERNAME") != null
                    ? System.getenv("ARTIFACTORY_USERNAME")
                    : System.properties['de.unijena.bioinf.build.artifactory.username']
            password = System.getenv("ARTIFACTORY_TOKEN") != null
                    ? System.getenv("ARTIFACTORY_TOKEN")
                    : System.properties['de.unijena.bioinf.build.artifactory.password']
        }
        defaults {
            //Publish every distribution to Artifactory
            publications("siriusMS")
            publications("manual")
        }
    }
}

artifactoryPublish.dependsOn 'refreshDownloadLinks'
artifactoryPublish.dependsOn 'refreshReadMe'